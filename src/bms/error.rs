//! This module defines enums of errors and warnings on parse process.

use std::ops::RangeInclusive;

use num::BigUint;
use thiserror::Error;

use super::{
    command::{ObjId, channel::ChannelIdParseWarning},
    prelude::*,
};

/// An error occurred when parsing the [`TokenStream`].
#[derive(Debug, Clone, PartialEq, Eq, Hash, Error)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub enum ControlFlowWarning {
    /// Unexpected control flow.
    #[error("unexpected control flow {0}")]
    UnexpectedControlFlow(String),
    /// [`Rng`] generated a value outside the required [`RangeInclusive`] for a random block.
    #[error("random generated value out of range: expected {expected:?}, got {actual}")]
    RandomGeneratedValueOutOfRange {
        /// The expected range of the random block.
        expected: RangeInclusive<BigUint>,
        /// The actual value generated by the [`Rng`].
        actual: BigUint,
    },
    /// [`Rng`] generated a value outside the required [`RangeInclusive`] for a switch block.
    #[error("switch generated value out of range: expected {expected:?}, got {actual}")]
    SwitchGeneratedValueOutOfRange {
        /// The expected range of the switch block.
        expected: RangeInclusive<BigUint>,
        /// The actual value generated by the [`Rng`].
        actual: BigUint,
    },
}

/// A parse error with position information.
pub type ControlFlowWarningWithRange = SourceRangeMixin<ControlFlowWarning>;

/// A warning occurred when parsing the [`TokenStream`].
#[derive(Debug, Clone, PartialEq, Eq, Hash, Error)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub enum ParseWarning {
    /// Syntax formed from the commands was invalid.
    #[error("syntax error: {0}")]
    SyntaxError(String),
    /// The object has required but not defined,
    #[error("undefined object: {0:?}")]
    UndefinedObject(ObjId),
    /// Has duplicated definition, that `prompt_handler` returned [`DuplicationWorkaround::Warn`].
    #[error("duplicating definition: {0}")]
    DuplicatingDef(ObjId),
    /// Has duplicated track object, that `prompt_handler` returned [`DuplicationWorkaround::Warn`].
    #[error("duplicating track object: {0} {1}")]
    DuplicatingTrackObj(Track, Channel),
    /// Has duplicated channel object, that `prompt_handler` returned [`DuplicationWorkaround::Warn`].
    #[error("duplicating channel object: {0} {1}")]
    DuplicatingChannelObj(ObjTime, Channel),
    /// Failed to convert a byte into a base-62 character `0-9A-Za-z`.
    #[error("expected id format is base 62 (`0-9A-Za-z`)")]
    OutOfBase62,
    /// Control flow warning.
    #[error("control flow warning: {0}")]
    ControlFlow(#[from] ControlFlowWarning),
    /// Channel ID parsing warning.
    #[error("channel id parsing warning: {0}")]
    ChannelId(#[from] ChannelIdParseWarning),
}

/// Type alias of `core::result::Result<T, ParseWarning>`
pub(crate) type Result<T> = core::result::Result<T, ParseWarning>;

/// A parse warning with position information.
pub type ParseWarningWithRange = SourceRangeMixin<ParseWarning>;
